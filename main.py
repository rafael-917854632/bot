from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from app import keyboard as kb
from PIL import Image, ImageFilter
import requests
import random
import time
import io
import os


TOKEN_API = '5656352107:AAHqbDVULliROBC_kVKk_fbBITtdliVmQ58'

bot = Bot(token=TOKEN_API)
dp = Dispatcher(bot)

secret_number = random.randint(0, 10)
print(secret_number)
game_ended = False


async def on_startup(_):
    print("–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω")


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.keyboard)


@dp.message_handler(lambda message: message.text == "üéÆ –°—ã–≥—Ä–∞–µ–º")
async def game(message: types.Message):
    await message.answer("–í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º?", reply_markup=kb.keyboard_for_games)


@dp.message_handler(lambda message: message.text == "‚Æâ –ù–∞–∑–∞–¥")
async def back(message: types.Message):
    await message.answer("–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.keyboard)


@dp.message_handler(lambda message: message.text == "üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
async def guess_the_number(message: types.Message):
    await message.answer("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")


@dp.message_handler(lambda message: message.text == "üëæ –†–æ–ª–µ–≤–∞—è –∏–≥—Ä–∞")
async def role_playing_game(message: types.Message):
    await message.answer('''–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∑–µ–º–ª—è—Ö, –∑–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –¥—Ä–∞–∫–æ–Ω–∞–º–∏.
–ü–µ—Ä–µ–¥ —Å–æ–±–æ–π –≤—ã –≤–∏–¥–∏—Ç–µ –¥–≤–µ –ø–µ—â–µ—Ä—ã. –í –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –¥—Ä–∞–∫–æ–Ω,
–∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —Å–≤–æ–∏–º–∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏. –í–æ –≤—Ç–æ—Ä–æ–π ‚Äî
–∂–∞–¥–Ω—ã–π –∏ –≥–æ–ª–æ–¥–Ω—ã–π –¥—Ä–∞–∫–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–∏–≥–æ–º –≤–∞—Å —Å—ä–µ—Å—Ç.
''')
    await message.answer('–í –∫–∞–∫—É—é –ø–µ—â–µ—Ä—É –≤—ã –≤–æ–π–¥–µ—Ç–µ? (–Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É ‚Ññ1 –∏–ª–∏ ‚Ññ2)', reply_markup=kb.answer_options)


@dp.message_handler(commands=['1', '2'], commands_prefix=['‚Ññ'])
async def answer_options(message: types.Message):
    await message.answer('–í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –ø–µ—â–µ—Ä–µ...')
    time.sleep(2)
    await message.answer('–ï–µ —Ç–µ–º–Ω–æ—Ç–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞—Å –¥—Ä–æ–∂–∞—Ç—å –æ—Ç —Å—Ç—Ä–∞—Ö–∞...')
    time.sleep(2)
    await message.answer('–ë–æ–ª—å—à–æ–π –¥—Ä–∞–∫–æ–Ω –≤—ã–ø—Ä—ã–≥–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏! –û–Ω —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é –ø–∞—Å—Ç—å –∏...')
    time.sleep(2)
    friendlyCave = random.randint(1, 2)

    if message.text == '‚Ññ' + str(friendlyCave):
        await message.answer('...–¥–µ–ª–∏—Ç—Å—è —Å –≤–∞–º–∏ —Å–≤–æ–∏–º–∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏!', reply_markup=kb.keyboard)
    else:
        await message.answer('...–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –≤–∞—Å —Å—ä–µ–¥–∞–µ—Ç!', reply_markup=kb.keyboard)


@dp.message_handler(lambda message: message.text == "üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ")
async def edit_photo(message: types.Message):
    await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å.")


@dp.message_handler(commands=['BLUR', 'CONTOUR', 'DETAIL', 'EDGE_ENHANCE', 'EDGE_ENHANCE_MORE', 'EMBOSS', 'FIND_EDGES', 'SMOOTH', '#SMOOTH_MORE', 'SHARPEN'], commands_prefix=['#'])
async def answer_options(message: types.Message):
    if message.text == '#BLUR':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.BLUR)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#CONTOUR':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.CONTOUR)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#DETAIL':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.DETAIL)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#EDGE_ENHANCE':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.EDGE_ENHANCE)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#EDGE_ENHANCE_MORE':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.EDGE_ENHANCE_MORE)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#EMBOSS':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.EMBOSS)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#FIND_EDGES':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.FIND_EDGES)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#SMOOTH':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.SMOOTH)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#SMOOTH_MORE':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.SMOOTH_MORE)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)

    if message.text == '#SHARPEN':
        img = Image.open('static/photo.png')

        treatment = img.filter(ImageFilter.SHARPEN)
        treatment.save('static/modified photo.png')
        await bot.send_photo(chat_id=message.chat.id, photo=open('static/modified photo.png', 'rb'), reply_markup=kb.keyboard)


@dp.message_handler(lambda message: message.text == "–ö–æ–¥ –±–æ—Ç–∞")
async def edit_photo(message: types.Message):
    await message.reply('''–ö–æ–¥ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –º–æ—ë–º Get Hub:
https://github.com/rafael-917854632/bot''')


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def game(message: types.Message):
    text = message.text
    if text.isdigit():
        global secret_number, game_ended

        if game_ended:
            return

        try:
            guess = int(message.text)

            if guess == secret_number:
                await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!", reply_markup=kb.keyboard)
                game_ended = True
            elif guess < secret_number:
                await message.answer("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ.")
            else:
                await message.answer("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –≤–∞—à–µ–≥–æ.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10.")

    else:
        await message.answer("""–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.
–ü—Ä–æ—Å—å–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.""")


URI_INFO = f'https://api.telegram.org/bot{TOKEN_API}/getFile?file_id='
URI = f'https://api.telegram.org/file/bot{TOKEN_API}/'


@dp.message_handler(content_types=['photo'])
async def process_photo(msg: types.Message):
    file_id = msg.photo[3].file_id
    resp = requests.get(URI_INFO + file_id)
    img_path = resp.json()['result']['file_path']
    img = requests.get(URI+img_path)
    img = Image.open(io.BytesIO(img.content))
    if not os.path.exists('static'):
        os.mkdir('static')
    img.save(f'static/photo.png', format='PNG')

    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å:', reply_markup=kb.action_with_photo)


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
